grammar SimpleST;

// Parser
program
    : statement* EOF
    ;

statement
    : assignment                         #AssignStmt
    | ifStatement                        #IfStmt
    ;

assignment
    : IDENTIFIER ':=' expr ';'
    ;

ifStatement
    : 'IF' expr 'THEN' statement* 'END_IF' ';'
    ;

expr
    : expr '*' expr                      #MulExpr
    | expr '+' expr                      #AddExpr
    | expr '-' expr                      #SubExpr
    | '(' expr ')'                       #ParenExpr
    | INT                                #IntLiteral
    | IDENTIFIER                         #VarReference
    ;

// Lexer
IF          : 'IF';
THEN        : 'THEN';
END_IF      : 'END_IF';

IDENTIFIER  : [a-zA-Z_][a-zA-Z0-9_]* ;
INT         : [0-9]+ ;

WS          : [ \t\r\n]+ -> skip ;
COMMENT     : '//' ~[\r\n]* -> skip ;